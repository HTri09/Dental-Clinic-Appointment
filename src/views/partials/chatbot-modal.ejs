<button class="chatbot-toggler">
   <span class="material-symbols-rounded">Chat</span>
   <span class="material-symbols-outlined">Close</span>
</button>
<div class="chatbot">
   <header>
      <h4>Dental Clinic Chatbot</h4>
      <span class="close-btn material-symbols-outlined">close</span>
   </header>
   <ul class="chatbox">
      <li class="chat incoming">
         <span class="material-symbols-outlined">smart_toy</span>
         <p>Chào mừng bạn đến với phòng khám nha khoa Dental Clinic <br> Bạn cần tư vấn gì nào?</p>
      </li>
   </ul>
   <div class="chat-input">
      <textarea placeholder="Nhập tin nhắn..." spellcheck="false" required></textarea>
      <span id="send-btn" class="material-symbols-rounded">Gửi</span>
   </div>
</div>

<script>
   const chatbotToggler = document.querySelector(".chatbot-toggler");
   const closeBtn = document.querySelector(".close-btn");
   const chatbox = document.querySelector(".chatbox");
   const chatInput = document.querySelector(".chat-input textarea");
   const sendChatBtn = document.querySelector(".chat-input span");

   let userMessage = null; // Variable to store user's message
   const inputInitHeight = chatInput.scrollHeight;

   // API configuration
   const createChatLi = (message, className) => {
      // Create a chat <li> element with passed message and className
      const chatLi = document.createElement("li");
      chatLi.classList.add("chat", `${className}`);
      let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
      chatLi.innerHTML = chatContent;
      chatLi.querySelector("p").textContent = message;
      return chatLi; // return chat <li> element
   }

   const generateResponse = async (chatElement) => {
      const messageElement = chatElement.querySelector("p");

      try {
         const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({
               contents: {
                  role: "user",
                  parts: { text: userMessage }
               }
            })
         });


         const data = await response.json();

         if (!response.ok) {
            throw new Error('Network response was not ok');
         }

         // messageElement.textContent = data.response.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, '$1');
         const markdownText = data.response.candidates[0].content.parts[0].text
         messageElement.innerHTML = marked.parse(markdownText);

      } catch (error) {
         console.error(error);
         messageElement.textContent = 'Something went wrong. Please try again.';
      } finally {
         chatbox.scrollTo(0, chatbox.scrollHeight);
      }
   };


   const handleChat = () => {
      userMessage = chatInput.value.trim(); // Get user entered message and remove extra whitespace
      if (!userMessage) return;

      // Clear the input textarea and set its height to default
      chatInput.value = "";
      chatInput.style.height = `${inputInitHeight}px`;

      // Append the user's message to the chatbox
      chatbox.appendChild(createChatLi(userMessage, "outgoing"));
      chatbox.scrollTo(0, chatbox.scrollHeight);

      setTimeout(() => {
         // Display "Thinking..." message while waiting for the response
         const incomingChatLi = createChatLi("...", "incoming");
         chatbox.appendChild(incomingChatLi);
         chatbox.scrollTo(0, chatbox.scrollHeight);
         generateResponse(incomingChatLi);
      }, 600);
   }

   chatInput.addEventListener("input", () => {
      // Adjust the height of the input textarea based on its content
      chatInput.style.height = `${inputInitHeight}px`;
      chatInput.style.height = `${chatInput.scrollHeight}px`;
   });

   chatInput.addEventListener("keydown", (e) => {
      // If Enter key is pressed without Shift key and the window 
      // width is greater than 800px, handle the chat
      if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
         e.preventDefault();
         handleChat();
      }
   });

   sendChatBtn.addEventListener("click", handleChat);
   closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
   chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
</script>